@page "/"
@using IlemlamlaBlazor.Interfaces
@using IlemlamlaBlazor.Models
@using IlemlamlaBlazor.Utils
@using Microsoft.JSInterop
@inject IBirthdayDataService BirthdayDataService
@inject IAgeCalculator AgeCalculator
@inject IJSRuntime JSRuntime

<PageTitle>Ilemlamla</PageTitle>
@implements IDisposable

<link href="css/home.css" rel="stylesheet" />

<div class="paper-container">
    <h1><img src="logunio.png" alt="Logunio" class="logo-image" /></h1>

    @if (birthdayItems == null)
    {
        <p class="loading">Loading...</p>
    }
    else
    {
        <table class="fancy-table">
            <tbody>
                @foreach (var item in ValidBirthdayItems)
                {
                    <tr class="fancy-row tooltip-container">
                        <td @onclick="() => ToggleTooltip(item.Item)">
                            @item.AgeInfo
                            @if (selectedItem == item.Item)
                            {
                                <div class="tooltip-text">
                                    @if (DateTime.TryParseExact(item.Item.Date, "yyyyMMddHHmm", null, System.Globalization.DateTimeStyles.None, out DateTime birthDate))
                                    {
                                        @($"{item.Item.Name}: {birthDate:dd.MM.yyyy HH:mm}")
                                    }
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<div class="source-info">
    Source: @currentSource
</div>

@code {
    private List<BirthdayItem> birthdayItems;
    private BirthdayItem selectedItem;
    private System.Threading.Timer tooltipTimer;
    private string currentSource;

    private List<(BirthdayItem Item, string AgeInfo)> ValidBirthdayItems => 
        birthdayItems?
            .Select(item => (Item: item, AgeInfo: GetAgeInfo(item)))
            .Where(x => !string.IsNullOrEmpty(x.AgeInfo))
            .ToList() ?? new List<(BirthdayItem, string)>();

    protected override async Task OnInitializedAsync()
    {
        birthdayItems = await BirthdayDataService.GetBirthdayItemsAsync();
        currentSource = await BirthdayDataService.GetCurrentSourceNameAsync();
    }

    private void ToggleTooltip(BirthdayItem item)
    {
        if (selectedItem == item)
        {
            selectedItem = null;
        }
        else
        {
            selectedItem = item;
            tooltipTimer?.Dispose();
            tooltipTimer = new System.Threading.Timer(_ =>
            {
                InvokeAsync(() =>
                {
                    selectedItem = null;
                    StateHasChanged();
                });
            }, null, 3000, Timeout.Infinite);
        }
    }

    private string GetAgeInfo(BirthdayItem item)
    {
        if (DateTime.TryParseExact(item.Date, "yyyyMMddHHmm", null, System.Globalization.DateTimeStyles.None, out DateTime birthDate))
        {
            return AgeCalculator.FormatAgeInPolish(item.Name, birthDate);
        }
        return string.Empty;
    }

    public void Dispose()
    {
        tooltipTimer?.Dispose();
    }
}