@page "/"
@using IlemlamlaBlazor.Interfaces
@using IlemlamlaBlazor.Models
@using IlemlamlaBlazor.Utils
@using Microsoft.JSInterop
@inject IBirthdayDataService BirthdayDataService
@inject IAgeCalculator AgeCalculator
@inject IJSRuntime JSRuntime

<PageTitle>Ilemlamla</PageTitle>

@implements IDisposable

<style>
    body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; /* Professional font stack */
        background-color: #f5f5f5; /* Light gray background */
        color: #333;
        margin: 0;
        padding: 20px;
    }

    .paper-container {
        width: 95%;
        max-width: 1200px;
        margin: 0 auto;
        background-color: #fff; /* White paper background */
        padding: 30px;
        border: 1px solid #ddd; /* Subtle border */
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        border-radius: 15px;
        transition: box-shadow 0.3s ease;
    }

    .paper-container:hover {
        box-shadow: 0 25px 45px rgba(0, 0, 0, 0.15);
    }

    h1 {
        width: 100%;
        text-align: center;
        margin-bottom: 30px;
    }

    .logo-image {
        max-width: 100%;
        height: auto;
        display: block;
        margin: 0 auto 30px;
    }

    .fancy-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 6px;
        margin-top: 20px;
    }

    .fancy-row {
        position: relative;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .fancy-row td {
        padding: 8px 20px;
        background-color: #ffffff;
        position: relative;
        transform-style: preserve-3d;
        transition: all 0.3s ease;
    }

    .fancy-row td:first-child {
        border-radius: 10px 0 0 10px;
    }

    .fancy-row td:last-child {
        border-radius: 0 10px 10px 0;
    }

    .fancy-row:hover td {
        background-color: #FFD700; /* Yellow background */
        color: #000000; /* Black text */
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .custom-tooltip {
        position: fixed;
        padding: 10px 15px;
        background: #333;
        color: white;
        border-radius: 6px;
        font-size: 14px;
        pointer-events: none;
        z-index: 1000;
        display: none;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        white-space: nowrap;
        border: 2px solid #FFD700;
    }

    .loading {
        text-align: center;
        color: #4A90E2;
        font-size: 1.2rem;
    }

    .tooltip-container {
        position: relative;
    }

    .tooltip-text {
        position: absolute;
        background-color: #333;
        color: white;
        padding: 10px 15px;
        border-radius: 6px;
        font-size: 14px;
        z-index: 1000;
        white-space: nowrap;
        border: 2px solid #FFD700;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        top: -40px;
        left: 50%;
        transform: translateX(-50%);
    }
</style>

<div class="paper-container">
    <h1><img src="logunio.png" alt="Logunio" class="logo-image" /></h1>

    @if (birthdayItems == null)
    {
        <p class="loading">Loading...</p>
    }
    else
    {
        <table class="fancy-table">
            <tbody>
                @foreach (var item in birthdayItems)
                {
                    <tr class="fancy-row tooltip-container">
                        <td @onclick="() => ToggleTooltip(item)">
                            @GetAgeInfo(item)
                            @if (selectedItem == item)
                            {
                                <div class="tooltip-text">
                                    @if (DateTime.TryParseExact(item.Date, "yyyyMMddHHmm", null, System.Globalization.DateTimeStyles.None, out DateTime birthDate))
                                    {
                                        @($"{item.Name}: {birthDate:dd.MM.yyyy HH:mm}")
                                    }
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<BirthdayItem> birthdayItems;
    private BirthdayItem selectedItem;
    private System.Threading.Timer tooltipTimer;

    protected override async Task OnInitializedAsync()
    {
        birthdayItems = await BirthdayDataService.GetBirthdayItemsAsync();
    }

    private void ToggleTooltip(BirthdayItem item)
    {
        if (selectedItem == item)
        {
            selectedItem = null;
        }
        else
        {
            selectedItem = item;
            tooltipTimer?.Dispose();
            tooltipTimer = new System.Threading.Timer(_ =>
            {
                InvokeAsync(() =>
                {
                    selectedItem = null;
                    StateHasChanged();
                });
            }, null, 3000, Timeout.Infinite);
        }
    }

    private string GetAgeInfo(BirthdayItem item)
    {
        if (DateTime.TryParseExact(item.Date, "yyyyMMddHHmm", null, System.Globalization.DateTimeStyles.None, out DateTime birthDate))
        {
            return AgeCalculator.FormatAgeInPolish(item.Name, birthDate);
        }
        return "Nieprawidłowa data";
    }

    public void Dispose()
    {
        tooltipTimer?.Dispose();
    }
}