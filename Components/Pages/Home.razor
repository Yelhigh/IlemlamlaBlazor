@page "/"
@using IlemlamlaBlazor.Interfaces
@using IlemlamlaBlazor.Models
@using IlemlamlaBlazor.Utils
@using Microsoft.JSInterop
@inject IBirthdayDataService BirthdayDataService
@inject IAgeCalculator AgeCalculator
@inject IJSRuntime JSRuntime

<style>
    body {
        font-family: 'Patrick Hand', cursive; /* Handwritten-style font */
        background-color: #f5f5f5; /* Light gray background */
        color: #333;
        margin: 0;
        padding: 20px;
    }

    .paper-container {
        max-width: 800px;
        margin: 0 auto;
        background-color: #fff; /* White paper background */
        padding: 30px;
        border: 1px solid #ddd; /* Subtle border */
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        border-radius: 15px;
        transform: perspective(1000px) rotateX(2deg);
        transform-style: preserve-3d;
        transition: transform 0.3s ease;
    }

    .paper-container:hover {
        transform: perspective(1000px) rotateX(0deg);
    }

    h1 {
        color: #4A90E2;
        text-align: center;
        margin-bottom: 30px;
        font-size: 2.8rem;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    }

    .fancy-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 6px;
        margin-top: 20px;
    }

    .fancy-row {
        position: relative;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .fancy-row td {
        padding: 8px 20px;
        background-color: #ffffff;
        position: relative;
        transform-style: preserve-3d;
        transition: all 0.3s ease;
    }

    .fancy-row td:first-child {
        border-radius: 10px 0 0 10px;
    }

    .fancy-row td:last-child {
        border-radius: 0 10px 10px 0;
    }

    .fancy-row:hover td {
        background-color: #FFD700; /* Yellow background */
        color: #000000; /* Black text */
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .custom-tooltip {
        position: fixed;
        padding: 10px 15px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        border-radius: 6px;
        font-size: 14px;
        pointer-events: none;
        z-index: 1000;
        display: none;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .loading {
        text-align: center;
        color: #4A90E2;
        font-size: 1.2rem;
    }
</style>

<div class="paper-container">
    <h1>ILEMLAMLA</h1>

    <div class="custom-tooltip" id="tooltip"></div>

    @if (birthdayItems == null)
    {
        <p class="loading">Loading...</p>
    }
    else
    {
        <table class="fancy-table">
            <tbody>
                @foreach (var item in birthdayItems)
                {
                    <tr class="fancy-row" @onmousemove="@(e => ShowTooltip(e, item))" @onmouseout="HideTooltip">
                        <td>@item.Name</td>
                        <td>@GetAgeInfo(item)</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<BirthdayItem> birthdayItems;

    protected override async Task OnInitializedAsync()
    {
        birthdayItems = await BirthdayDataService.GetBirthdayItemsAsync();
    }

    private string GetAgeInfo(BirthdayItem item)
    {
        if (DateTime.TryParseExact(item.Date, "yyyyMMddHHmm", null, System.Globalization.DateTimeStyles.None, out DateTime birthDate))
        {
            return AgeCalculator.FormatAgeInPolish(item.Name, birthDate);
        }
        return "Nieprawidłowa data";
    }

    private async Task ShowTooltip(MouseEventArgs e, BirthdayItem item)
    {
        if (DateTime.TryParseExact(item.Date, "yyyyMMddHHmm", null, System.Globalization.DateTimeStyles.None, out DateTime birthDate))
        {
            var ageInfo = AgeCalculator.FormatAgeInPolish(item.Name, birthDate);
            var js = $"var tooltip = document.getElementById('tooltip'); tooltip.style.display = 'block'; tooltip.style.left = '{e.ClientX + 15}px'; tooltip.style.top = '{e.ClientY + 15}px'; tooltip.textContent = '{ageInfo}';";
            await JSRuntime.InvokeVoidAsync("eval", js);
        }
    }

    private async Task HideTooltip()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('tooltip').style.display = 'none';");
    }
}